package de.thekid.dialog.api;

import de.thekid.dialog.IEntry;

import io.Folder;
import io.File;
import io.FileUtil;

import native standard.serialize;
import native standard.unserialize;

/**
 * Base class
 * 
 */
package abstract class ApiHandler {
  protected Folder $dataLocation;
  protected Folder $fileLocation;

  /**
   * Configure
   * 
   * @param  prop
   */
  [@inject(name = 'dialog')]
  public void configure(util.Properties $prop) {
    $this.dataLocation= new Folder($prop.readString('data', 'location', '.'));
    $this.fileLocation= new Folder($prop.readString('file', 'location', 'doc_root'));
  }

  /**
   * Gets the storage location for album images
   */
  protected Folder imageLocation(IEntry $entry) {
    if ($entry instanceof de.thekid.dialog.Album) {
      return new Folder($this.fileLocation, 'albums', $entry.getName());
    } else if ($entry instanceof de.thekid.dialog.SingleShot) {
      return new Folder($this.fileLocation, 'shots');
    } else {
      throw new IllegalArgumentException('Cannot compute image location for ' ~ $entry.getClassName());
    }
  }

  /**
   * Check whether a given entry exists
   */
  protected bool hasEntry(Name $name) {
    return new File($this.dataLocation, $name ~ '.dat').exists();
  }

  /**
   * Add an entry
   */
  protected Name addEntry(Name $name, IEntry $entry) throws IllegalStateException {
    with ($storage= new File($this.dataLocation, $name ~ '.dat')) {
      if ($storage.exists()) {
        throw new IllegalStateException('Entry ' ~ $name ~ ' already exists');
      }

      FileUtil::setContents($storage, serialize($entry));
      return $name;
    }
  }

  /**
   * Save an entry
   */
  protected Name saveEntry(Name $name, IEntry $entry) {
    with ($storage= new File($this.dataLocation, $name ~ '.dat')) {
      FileUtil::setContents($storage, serialize($entry));
      return $name;
    }
  }

  /**
   * Get an entry
   */
  protected IEntry getEntry(Name $name) throws ElementNotFoundException {
    with ($storage= new File($this.dataLocation, $name ~ '.dat')) {
      if (!$storage.exists()) {
        throw new ElementNotFoundException('Entry ' ~ $name ~ ' does not exist');
      }

      return unserialize(FileUtil::getContents($storage));
    }
  }

  /**
   * Delete an entry
   */
  protected void deleteEntry(Name $name) throws ElementNotFoundException {
    with ($storage= new File($this.dataLocation, $name ~ '.dat')) {
      if (!$storage.exists()) {
        throw new ElementNotFoundException('Entry ' ~ $name ~ ' does not exist');
      }

      $storage.unlink();
    }
  }
}